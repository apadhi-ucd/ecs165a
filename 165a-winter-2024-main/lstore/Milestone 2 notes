Milestone 2 Functions and Goals

  Goals:
      Bufferpool - From what I understand the bufferpool it keeps track of most frequent accessed pages, evicts a page 
                   when needed, utilizes pin/unpin and ensures multiple transactions occur concurrently/same time

                   My ideas for each purpose:

                     What to track - Whenever a page is accessed, we can have a variable keeping track of visits and increment each time 
                     and we could compare each page and include the most visited pages in the bufferpool. Starting out we
                     can have bufferpool empty and add the first visited pages into the pool.

                     Eviction - Evicting pages I think the easiest method would to be evict a page with the least visits, and if 
                     there is a tie among number of visits, we can do random or pick the page that hasn't been visited 
                     for the longest time or whatever is easier.

                     Pin/Unpin - When a page is accessed, can set a pin value = 1 and when transaction is finished, set 
                     pin value back to 0. So, we could have something like if page pin = 1 --> dont evict (Essentially
                     this keeps track of which pages are being used)

                     Synchronization - Not sure if we need this in this milestone 

                     Dirty pages - Keep track of updated pages in the bufferpool used when 
                     flush to disk upon replacement or when close() is called and can have something like if all page in 
                     bufferpool dirty val = 0... 

Implementations:

      Update Page Class - within the init(), implement a first line label for each page holding important information about the page (i.e. number of page visits, dirty/clean, table association.)


      Buffer Pool Class: 
        - Notes: Least frequently used out first
        - Instance variabels: dirty page count, number of pages
        - evict(): checks if page is clean or dirty, writes to disk if clean, otherwise discards
        - pull(): pull full page from disk based off of needed data
        - read(): should return wanted data and update the dirty/clean and page visits variables in the page


TO DO:
- Figure out merge()
- Ensure compatibility with "labeling" idea



CYRUS (2/23 : 2pm):
- added BufferPool class
- included pseudo ish code for logical flow of the new class
- Thoughts moving forward:
    - update query table calls -> query buffer pool calls as all data should be in buffer pool
    - rethinking if page count is necessary within the buffer pool class, is it a set number of pages open at all times? or is it variable depending on need? If variable, we need to have the page count, if it is a set number of pages, then we don't
